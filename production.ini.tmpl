#
# SAUCE - TurboGears configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# This file is for deployment specific config options -- other configuration
# that is always required for the app is done in the config directory,
# and generally should not be modified by end users.

[DEFAULT]
# WARNING == If debug is not set to false, you'll get the interactive
# debugger on production, which is a huge security hole.

debug = false

# Uncomment and replace with the address which should receive any error reports
# email_to is also used as the maintainer contact address
email_to = you@yourdomain.com
smtp_server = localhost
#smtp_use_tls
#smtp_username
#smtp_password
error_email_from = paste@localhost
admin_email_from = sauce@localhost

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 8080

[app:main]
use = egg:SAUCE
full_stack = true
#lang = en

# Specify a locale setting and date/time format strings, mainly for strftime/strptime
locale = de_DE.UTF-8
D_FMT = %%Y-%%m-%%d
T_FMT = %%H:%%M:%%S
D_T_FMT = %%Y-%%m-%%d %%H:%%M:%%S

# Whether to run tests on submissions in setup-app
websetup.run_tests = true

# When using sentry with debug = false, you have to set full_stack = false and handle 500 error pages yourself
# sentry.dsn = DSN

# Specify the database for SQLAlchemy to use
# %(here) may include a ':' character on Windows environments; this can
# invalidate the URI when specifying a SQLite db via path name
# sqlalchemy.url=postgres://username:password@hostname:port/databasename
# sqlalchemy.url=mysql://username:password@hostname:port/databasename

sqlalchemy.url = sqlite:///%(here)s/data.db
# sqlalchemy.echo shouldn't be used together with the logging module.
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600

#[alembic]
script_location = migration

cache_dir = %(here)s/data

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions
beaker.cache.type = file

#By default session is store in cookies to avoid the overhead
#of having to manage a session storage. On production you might
#want to switch to a better session storage.
beaker.session.type = file
beaker.session.key = sauce
beaker.session.secret = ${app_instance_secret}
beaker.session.validate_key = ${app_instance_secret}

# Disable template autoreload to boost performances in production
# WARNING: if you want to deploy your application using a zipped egg
# (ie: if your application's setup.py defines zip-safe=True, then you
# MUST put "false" for the production environment because there will
# be no disk and real files to compare time with.
# Only in TG >= 2.2
auto_reload_templates = false

# if you are using Mako and want to be able to reload
# the mako template from disk during the development phase
# you should say 'true' here
# This option is only used for mako templating engine
# Only in TG < 2.2
templating.mako.reloadfromdisk = false

# the compiled template dir is a directory that must be readable by your
# webserver. It will be used to store the resulting templates once compiled
# by the TemplateLookup system.
# During development you generally don't need this option since paste's HTTP
# server will have access to you development directories, but in production
# you'll most certainly want to have apache or nginx to write in a directory
# that does not contain any source code in any form for obvious security reasons.
templating.mako.compiled_templates_dir = %(here)s/data/templates

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
set debug = false

#turn this setting to "min" if you would like tw to produce minified
#javascript files (if your library supports that)
toscawidgets.framework.resource_variant = min

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/library/logging.config.html#configuration-file-format

[loggers]
keys = root, sauce, sqlalchemy, auth, runner, tw2

[handlers]
keys = console

[formatters]
keys = generic

# If you create additional loggers, add them as a key to [loggers]
[logger_root]
level = INFO
handlers = console

[logger_sauce]
level = INFO
handlers =
qualname = sauce

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

# A logger for authentication, identification and authorization -- this is
# repoze.who and repoze.what:
[logger_auth]
level = WARN
handlers =
qualname = auth

[logger_runner]
level = INFO
handlers =
qualname = sauce.lib.runner

[logger_tw2]
level = WARN
handlers =
qualname = tw2.core.middleware

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S
